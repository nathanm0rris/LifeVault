/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var L=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var B=Object.prototype.hasOwnProperty;var H=(i,r)=>{for(var e in r)L(i,e,{get:r[e],enumerable:!0})},I=(i,r,e,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of E(r))!B.call(i,o)&&o!==e&&L(i,o,{get:()=>r[o],enumerable:!(s=v(r,o))||s.enumerable});return i};var j=i=>I(L({},"__esModule",{value:!0}),i);var P={};H(P,{default:()=>k});module.exports=j(P);var u=require("obsidian"),A={mySetting:"default"},w=Object.entries({"- [ ]":0,"- [/]":1,"- [x]":2,"- [-]":3,"- [>]":3,"- [<]":3}),D=w.map(i=>i[0]),M=Object.entries({"\u{1F53A}":-2,"\u23EB":-1,"\u{1F53D}":1,"\u23EC":2}),p=!1,k=class extends u.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"reorder-completed-tasks",name:"Reorder completed tasks",callback:()=>{this.reorderCheckboxes()}}),this.registerDomEvent(document,"click",e=>{e&&e.target&&e.target.classList.contains("task-list-item-checkbox")&&(p=!0)}),this.registerEvent(this.app.workspace.on("editor-change",(e,s)=>{p=!0})),this.registerInterval(window.setInterval(()=>{p&&(p=!1,this.reorderCheckboxes())},10*1e3))}onunload(){}getSortValueByStatus(e){for(let[s,o]of w)if(e.startsWith(s))return o;return 0}getSortValueBySubstring(e){for(let[s,o]of M)if(e.indexOf(s)>=0)return o;return 0}lineHasChecklist(e){return D.some(s=>e.startsWith(s))}reorderCheckboxes(){let e=this.app.workspace.getActiveViewOfType(u.MarkdownView);if(!e)return;let s=e.editor,o=s.getCursor("anchor"),S=s.getCursor("head"),O=s.getValue(),y=[],h=[],g=-1,d=O.split(`
`);for(let t=0;t<d.length;t++){let a=d[t],f=t>0?d[t-1]:!1,n=t+1<d.length?d[t+1]:!1,c=t===S.line,l=this.lineHasChecklist(a.trim()),T=n?this.lineHasChecklist(n.trim()):!1,C=this.lineHasChecklist(a);!C&&l?g>=0&&h[g].sublines.push({line:a,sublines:[],hasCursor:c}):(h.push({line:a,sublines:[],hasCursor:c}),C&&(g=h.length-1)),(!n||l!==T)&&(y.push({lines:h,hasChecklists:g>=0}),h=[],g=-1)}if(!y.some(t=>t.hasChecklists))return;let V=y.map(t=>{if(t.hasChecklists){let a=t.lines.reduce((n,c)=>{let l=this.getSortValueByStatus(c.line);return n[l]||(n[l]=[]),n[l].push(c),n},{});return Object.keys(a).sort().reduce((n,c)=>{let l=a[c].sort((T,C)=>this.getSortValueBySubstring(T.line)-this.getSortValueBySubstring(C.line));return n.concat(l)},[])}return t.lines}).flat(),m=S.line,b=[];V.forEach((t,a)=>{t.hasCursor&&(m=a),b.push(t.line),t.sublines.forEach((f,n)=>{f.hasCursor&&(m=a+n),b.push(f.line)})});let x=b.join(`
`);x!==O&&(s.setValue(x),s.setSelection({line:m,ch:S.ch}))}async loadSettings(){this.settings=Object.assign({},A,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */